// --------------------------------------------------------------------------------------------------------------------
// <copyright file="FileHelper.DeleteFiles.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.IO.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.IO.Recipes
{
    using System;
    using System.Diagnostics;
    using System.IO;

    using OBeautifulCode.Assertion.Recipes;

#if !OBeautifulCodeIORecipesProject
    internal
#else
    public
#endif
    static partial class FileHelper
    {
        /// <summary>
        /// Deletes a file from disk.
        /// </summary>
        /// <param name="filePath">Path to file.</param>
        /// <exception cref="ArgumentNullException"><paramref name="filePath"/> is null.</exception>
        /// <exception cref="ArgumentException"><paramref name="filePath"/> is whitespace or contains one or more invalid characters.</exception>
        /// <exception cref="NotSupportedException"><paramref name="filePath"/> is in an invalid format.</exception>
        /// <exception cref="IOException">file couldn't be deleted.</exception>
        /// <exception cref="UnauthorizedAccessException"><paramref name="filePath"/> is a directory, caller doesn't have the required permissions.</exception>
        /// <remarks>
        /// No exception is thrown if file doesn't exist to begin with, if the path is too long, or the directory is not found.
        /// </remarks>
        public static void DeleteFile(
            string filePath)
        {
            new { filePath }.AsArg().Must().NotBeNullNorWhiteSpace();

            try
            {
                try
                {
                    // don't call File.Exists first - we're optimizing for the case where the file
                    // does exist
                    File.SetAttributes(filePath, FileAttributes.Normal);
                    File.Delete(filePath);
                    if (File.Exists(filePath))
                    {
                        // file might have been opened in a way that permits deleting
                        // but delete only happens after file handle is released by the holder
                        WaitForUnlock(filePath, 10);
                    }
                    else
                    {
                        // don't want to go back to disk...just return immediately.
                        return;
                    }
                }
                catch (FileNotFoundException)
                {
                    // file wasn't found
                    return;
                }
                catch (IOException)
                {
                    // file is in use and locked in a way that doesn't permit deleting
                    // wait for unlock and try again
                    if (WaitForUnlock(filePath, 10))
                    {
                        File.Delete(filePath);
                    }
                }
            }
            catch (IOException)
            {
                // somehow file got unlocked, but then locked up again right before we could delete it
            }

            if (File.Exists(filePath))
            {
                throw new IOException("Couldn't delete file " + filePath);
            }
        }

        /// <summary>
        /// Deletes all files in a given folder.
        /// </summary>
        /// <param name="folder">Folder containing files to delete.</param>
        /// <exception cref="ArgumentNullException"><paramref name="folder"/> is null.</exception>
        /// <exception cref="ArgumentException"><paramref name="folder"/> is whitespace or contains illegal characters.</exception>
        /// <exception cref="IOException"><paramref name="folder"/> is a file name, or if a file couldn't be deleted.</exception>
        /// <exception cref="UnauthorizedAccessException">caller doesn't have permission to browse files in the folder or delete a file in the folder.</exception>
        /// <exception cref="PathTooLongException"><paramref name="folder"/>'s path is too long or file within folder path is too long.</exception>
        /// <exception cref="DirectoryNotFoundException"><paramref name="folder"/> wasn't found.</exception>
        /// <remarks>
        /// If a file couldn't be deleted, the delete process stops.  So folder may contain multiple files that haven't
        /// been deleted yet.
        /// </remarks>
        public static void DeleteFiles(
            string folder)
        {
            new { folder }.AsArg().Must().NotBeNullNorWhiteSpace();

            // DONT append backslash - we don't want user accidentally deleting all files in the current working directory
            string[] files = Directory.GetFiles(folder);

            foreach (string filePath in files)
            {
                DeleteFile(filePath);
            }
        }

        /// <summary>
        /// Deletes a files from disk that match a specified search pattern in the specified folder, using a value to determine whether to search subdirectories.
        /// </summary>
        /// <param name="folder">The directory containing files to delete.</param>
        /// <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by DirectorySeparatorChar or AltDirectorySeparatorChar, nor can it contain any of the characters in InvalidPathChars.</param>
        /// <param name="searchOption">One of the SearchOption values that specifies whether the search operation should include all subdirectories or only the current directory.</param>
        /// <exception cref="ArgumentNullException"><paramref name="folder"/> is null.</exception>
        /// <exception cref="ArgumentException"><paramref name="folder"/> is whitespace or contains illegal characters.</exception>
        /// <exception cref="ArgumentNullException"><paramref name="searchPattern"/> is null.</exception>
        /// <exception cref="ArgumentException"><paramref name="searchPattern"/> is whitespace.</exception>
        /// <exception cref="IOException"><paramref name="folder"/> is a file name, or if a file couldn't be deleted.</exception>
        /// <exception cref="UnauthorizedAccessException">caller doesn't have permission to browse files in the folder or delete a file in the folder.</exception>
        /// <exception cref="PathTooLongException"><paramref name="folder"/> path is too long or file within folder path is too long.</exception>
        /// <exception cref="DirectoryNotFoundException"><paramref name="folder"/> wasn't found.</exception>
        /// <exception cref="ArgumentException">searchPattern does not contain a valid pattern.</exception>
        public static void DeleteFiles(
            string folder, 
            string searchPattern, 
            SearchOption searchOption)
        {
            new { folder }.AsArg().Must().NotBeNullNorWhiteSpace();
            new { searchPattern }.AsArg().Must().NotBeNullNorWhiteSpace();

            string[] files = Directory.GetFiles(folder, searchPattern, searchOption);
            foreach (string filePath in files)
            {
                DeleteFile(filePath);
            }
        }

        /// <summary>
        /// Deletes a file using DOS.
        /// </summary>
        /// <param name="filePath">file to delete.</param>
        /// <exception cref="ArgumentNullException"><paramref name="filePath"/> is null.</exception>
        /// <exception cref="ArgumentException"><paramref name="filePath"/> is whitespace.</exception>
        /// <remarks>
        /// Won't delete hidden or system files, even if the /A attribute is used with the del command (that is only applicable to wildcards)
        /// Won't delete files that are in use.
        /// Should be used as a last-ditch effort.
        /// </remarks>
        public static void DeleteFileDos(
            string filePath)
        {
            new { filePath }.AsArg().Must().NotBeNullNorWhiteSpace();

            var startInfo = new ProcessStartInfo
            {
                FileName = "cmd.exe",
                UseShellExecute = false,
                CreateNoWindow = true,
                Arguments = "/c del \"" + filePath + "\" /f",
            };
            using (var cmd = new Process())
            {
                cmd.StartInfo = startInfo;
                cmd.Start();
                cmd.WaitForExit();
            }
        }
    }
}