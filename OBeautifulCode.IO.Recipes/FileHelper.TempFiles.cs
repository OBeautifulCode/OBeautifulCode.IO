// --------------------------------------------------------------------------------------------------------------------
// <copyright file="FileHelper.TempFiles.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.IO.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.IO.Recipes
{
    using global::System;
    using global::System.Globalization;
    using global::System.IO;
    using global::System.Security;

    using OBeautifulCode.Math.Recipes;
    using OBeautifulCode.String.Recipes;

    using static global::System.FormattableString;

#if !OBeautifulCodeIOSolution
    internal
#else
    public
#endif
    static partial class FileHelper
    {
        /// <summary>
        /// Deletes all Files in the Windows Temporary folder that were last accessed prior
        /// to a specified number of minutes looking back from now.
        /// </summary>
        /// <param name="minutesToKeep">
        /// Keeps files that were last accessed within this number of minutes.  Minutes are based on time - keeping
        /// 1440 minutes means keeping files that were last modified 24 hours prior to right now.
        /// </param>
        /// <exception cref="ArgumentOutOfRangeException"><paramref name="minutesToKeep"/> is &lt;=0.</exception>
        /// <exception cref="UnauthorizedAccessException"> method can't access the directory.</exception>
        /// <remarks>
        /// Assumption that its not possible to delete the Windows temp folder and as such it won't disappear somehow
        /// in this process.
        /// </remarks>
        public static void ClearTemporaryFiles(
            int minutesToKeep)
        {
            ClearTemporaryFiles(Path.GetTempPath(), minutesToKeep);
        }

        /// <summary>
        /// Deletes all Files in a specified folder that were last accessed prior
        /// to a specified number of minutes looking back from now.
        /// </summary>
        /// <param name="temporaryFolder">The folder containing the files and folder to delete.</param>
        /// <param name="minutesToKeep">
        /// Keeps files that were last accessed within this number of minutes.  Minutes are based on time - keeping
        /// 1440 minutes means keeping files that were last modified 24 hours prior to right now.
        /// </param>
        /// <exception cref="ArgumentNullException"><paramref name="temporaryFolder"/> is null.</exception>
        /// <exception cref="ArgumentException"><paramref name="temporaryFolder"/> is whitespace.</exception>
        /// <exception cref="ArgumentOutOfRangeException"><paramref name="minutesToKeep"/> is &lt;=0.</exception>
        /// <exception cref="DirectoryNotFoundException">The directory doesn't exist or disappears during the process.</exception>
        /// <exception cref="UnauthorizedAccessException">method can't access the directory.</exception>
        public static void ClearTemporaryFiles(
            string temporaryFolder,
            int minutesToKeep)
        {
            if (temporaryFolder == null)
            {
                throw new ArgumentNullException(nameof(temporaryFolder));
            }

            if (string.IsNullOrWhiteSpace(temporaryFolder))
            {
                throw new ArgumentException(Invariant($"'{nameof(temporaryFolder)}' is white space"));
            }

            if (minutesToKeep <= 0)
            {
                throw new ArgumentOutOfRangeException(Invariant($"'{nameof(minutesToKeep)}' <= '{0}'"), (Exception)null);
            }

            if (!Directory.Exists(temporaryFolder))
            {
                throw new DirectoryNotFoundException("temporary folder doesn't exist '" + temporaryFolder + "'");
            }

            DateTime now = DateTime.Now;

            // delete files older than specified number of minutesToKeep
            // only exceptions that might be thrown are UnauthorizedAccessException or PathTooLongException (would this get past Directory.Exists?)
            string[] allFiles = Directory.GetFiles(temporaryFolder);
            foreach (string filePath in allFiles)
            {
                double minutesElapsed;
                try
                {
                    DateTime lastAccess = File.GetLastAccessTime(filePath);
                    minutesElapsed = MathHelper.Truncate((now - lastAccess).TotalMinutes);
                }
                catch (UnauthorizedAccessException)
                {
                    // if we get here then we can access the directory.  skip files we can't access
                    continue;
                }
                catch (PathTooLongException)
                {
                    // questionable if we can ever hit this.  If we get here the filePath is too long.  Folder path isn't otherwise Directory.GetFiles would have thrown.  ok to skip
                    continue;
                }

                if (minutesElapsed > minutesToKeep)
                {
                    try
                    {
                        // the only exception that can be thrown on this line is DirectoryNotFoundException if the
                        // temporaryFolder somehow disappears
                        DeleteFile(filePath);
                    }
                    catch (UnauthorizedAccessException)
                    {
                        // no problem, move on.
                    }
                    catch (IOException)
                    {
                        // no problem if we can't delete file, just move on
                    }
                } // file is old enough to delete?
            } // for each file to consider
        }

        /// <summary>
        /// Creates a temporary file in the Windows temporary folder.
        /// </summary>
        /// <returns>the filePath to a newly created temporary file.</returns>
        /// <exception cref="UnauthorizedAccessException">User doesn't have the proper access permissions.</exception>
        /// <exception cref="IOException">There are no temporary file names available, even after old files have been cleared.</exception>
        public static string CreateTemporaryFile()
        {
            lock (CreateTemporaryResourceLock)
            {
                try
                {
                    return Path.GetTempFileName();
                }
                catch (IOException)
                {
                    // no point to try again, Windows will always try to find the next available file
                    // so IOException means that there's none available
                    ClearTemporaryFiles(15);
                    return Path.GetTempFileName();
                }
            }
        }

        /// <summary>
        /// Creates a temporary file in a specified folder.
        /// </summary>
        /// <param name="rootDirectory">directory in which to create the temporary file.</param>
        /// <returns>
        /// Returns the path to the temporary file that was created.
        /// </returns>
        /// <exception cref="ArgumentNullException"><paramref name="rootDirectory"/> is null.</exception>
        /// <exception cref="ArgumentException"><paramref name="rootDirectory"/> is whitespace or contains illegal characters.</exception>
        /// <exception cref="DirectoryNotFoundException"><paramref name="rootDirectory"/> doesn't exist or disappears during the process.</exception>
        /// <exception cref="UnauthorizedAccessException">method can't access rootDirectory to clear out older temporary files, or when the system doesn't have access permission to write the zero-byte file to rootDirectory.</exception>
        /// <exception cref="PathTooLongException"><paramref name="rootDirectory"/> is greater than 248 characters or if the temporary file would exceed the character limit.</exception>
        /// <exception cref="SecurityException">The caller does not have the required permission to create a zero-byte file in the rootDirectory.</exception>
        /// <exception cref="IOException">Could't create a temporary file.</exception>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA2204:Literals should be spelled correctly", MessageId = "tmp", Justification = "This is spelled correctly.")]
        public static string CreateTemporaryFile(
            string rootDirectory)
        {
            lock (CreateTemporaryResourceLock)
            {
                if (rootDirectory == null)
                {
                    throw new ArgumentNullException(nameof(rootDirectory));
                }

                if (string.IsNullOrWhiteSpace(rootDirectory))
                {
                    throw new ArgumentException(Invariant($"'{nameof(rootDirectory)}' is white space"));
                }

                int attempt = 0;
                do
                {
                    string tempfilePath = rootDirectory.AppendMissing(@"\") + ThreadSafeRandom.Next(0, int.MaxValue).ToString(CultureInfo.CurrentCulture) + ".tmp";

                    if (File.Exists(tempfilePath))
                    {
                        attempt++;
                    }
                    else
                    {
                        if (CreateZeroByteFile(tempfilePath))
                        {
                            return tempfilePath;
                        }

                        throw new IOException("Couldn't create zero byte file " + tempfilePath);
                    }
                }
                while (attempt < 50);
                throw new IOException("Couldn't create zero byte file");
            } // lock _createTemporaryResourceLock
        }

        /// <summary>
        /// Creates a zero-byte file in a given directory using a timestamp.  <code>(yyyy-MM-ddTHH.mm.ss)</code>
        /// </summary>
        /// <param name="rootDirectory">The directory in which to create the file.  If null, the working directory is used.</param>
        /// <param name="prefix">An optional prefix to apply to the file name.</param>
        /// <param name="suffix">An optional suffix to apply to the file name.</param>
        /// <param name="extension">File extension without leading period.  Default is <code>'tmp'</code>.  Use null for no extension.</param>
        /// <returns>
        /// Returns the path to a zero-byte file where the file name is in the following format:
        /// [rootDirectory]\[prefix][timestamp][suffix].[extension].
        /// For example, <code>c:\my\root\dir\MyPrefix23-43-01.029MySuffix.tmp</code>.
        /// </returns>
        /// <exception cref="ArgumentException">The parameters supplied result in an invalid file path.</exception>
        /// <exception cref="IOException">An I/O error occurs, such as attempting to write a file that already exists.</exception>
        /// <exception cref="DirectoryNotFoundException"><paramref name="rootDirectory"/> does not exist.</exception>
        /// <exception cref="UnauthorizedAccessException">User doesn't have the proper access permissions.</exception>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Globalization", "CA1305:SpecifyIFormatProvider", MessageId = "System.String.Format(System.String,System.Object,System.Object)", Justification = "Can't use Invariant with framework 4.5.")]
        public static string CreateFileNamedByTimestamp(
            string rootDirectory = null,
            string prefix = null,
            string suffix = null,
            string extension = "tmp")
        {
            // determine file name
            DateTime timeStamp = DateTime.Now;
            string fileName = string.Concat(prefix, timeStamp.ToString("yyyy-MM-ddTHH.mm.ss", CultureInfo.InvariantCulture), suffix);
            if (!string.IsNullOrWhiteSpace(extension))
            {
                fileName = string.Concat(fileName, ".", extension);
            }

            fileName = fileName.Trim();

            // assign rootDirectory to working directory if not specified
            if (string.IsNullOrWhiteSpace(rootDirectory))
            {
                rootDirectory = Directory.GetCurrentDirectory();
            }

            // construct path & validate
            string filePath;
            try
            {
                filePath = Path.Combine(rootDirectory.Trim(), fileName);
            }
            catch (ArgumentException)
            {
                throw new ArgumentException($"The parameters supplied result in an invalid file path.\r\nroot directory: {rootDirectory}\r\nfile name: {fileName}");
            }

            if (!IsValidFilePath(filePath))
            {
                throw new ArgumentException("The parameters supplied result in an invalid file path: " + filePath);
            }

            // create file
            if (CreateZeroByteFile(filePath))
            {
                return filePath;
            }

            throw new IOException("Could not create a zero byte file here: " + filePath);
        }
    }
}